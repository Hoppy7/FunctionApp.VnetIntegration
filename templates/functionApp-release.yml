parameters:
    - name: environmentName
      type: string
    - name: agentImage
      type: string
      default: windows-2019
    - name: functionAppName
      type: string
    - name: vnetResourceId
      type: string
    - name: subnetSize
      type: string
      default: 25
    - name: azureSubscription
      type: string
    - name: resourceGroupName
      type: string
    - name: location
      type: string
    - name: armTemplate
      type: string
    - name: armTemplateParams
      type: string
    - name: deploymentMode
      type: string
      default: Complete
      values:
          - Complete
          - Incremental
    - name: cleanup
      type: boolean

stages:
  - stage: Release_${{ parameters.environmentName }}
    condition: succeeded()
    jobs:
      - deployment: ${{ parameters.environmentName }}
        environment: ${{ parameters.environmentName }}
        pool:
          vmImage: ${{ parameters.agentImage }}
        strategy:
          runOnce:
            deploy:
              steps:
              - task: AzurePowerShell@5
                displayName: Get-AzVnetNextAvailableCidrBlock
                condition: succeeded()
                inputs:
                  azureSubscription: ${{ parameters.azureSubscription }}
                  scriptPath: $(Pipeline.Workspace)/drop/scripts/Get-AzVnetNextAvailableCidrBlock.ps1
                  scriptArguments:
                    -webAppName ${{ parameters.functionAppName }} `
                    -vnetResourceId ${{ parameters.vnetResourceId }} `
                    -cidrBlock ${{ parameters.subnetSize }}
                  azurePowerShellVersion: LatestVersion
  
              - task: AzureResourceGroupDeployment@2
                enabled: true
                condition: succeeded()
                displayName: ARM Deployment
                inputs:
                  azureSubscription: ${{ parameters.azureSubscription }}
                  action: Create Or Update Resource Group
                  resourceGroupName: ${{ parameters.resourceGroupName }}
                  location: ${{ parameters.location }}
                  templateLocation: Linked artifact
                  csmFile: $(Pipeline.Workspace)/${{ parameters.armTemplate }}
                  csmParametersFile: $(Pipeline.Workspace)/${{ parameters.armTemplateParams }}
                  overrideParameters: 
                    -vnetResourceId ${{ parameters.vnetResourceId }} -subnetAddressPrefix $(cidrOutput) # $(cidrOutput) is dynamically created from AzVnetNextAvailableCidrBlock in previous task
                  deploymentMode: ${{ parameters.deploymentMode }}
  
              - task: AzureFunctionApp@1
                condition: succeeded()
                displayName: Deploy Azure Function App
                inputs:
                  azureSubscription: ${{ parameters.azureSubscription }}
                  resourceGroupName: $(resourceGroupName)
                  appType: functionApp
                  appName: ${{ parameters.functionAppName }}
                  package: $(Pipeline.Workspace)/**/*.zip
                  deploymentMethod: zipDeploy
                  # deployToSlotOrASE: true
                  # slotName: stage

              - task: AzurePowerShell@5
                condition: succeeded()
                displayName: Integration Test Runner
                inputs:
                  azureSubscription: $(azureSubscription)
                  scriptType: inlineScript
                  inline: |
                    $pesterVersion = "4.10.1";
                    Install-Module -Name Pester -Scope CurrentUser -RequiredVersion $pesterVersion -Force;
                    Import-Module Pester -RequiredVersion $pesterVersion -Force;

                    $functionAppName = '${{ parameters.functionAppName }}';
                    
                    $splat = @{
                        Script = @{
                            Path       = "$(Pipeline.Workspace)\drop\tests\functionApp.tests.ps1";
                            Parameters = @{ 
                                baseUri = $("https://" + $functionAppName + ".azurewebsites.net");
                            }
                        }
                        OutputFile   = "$(Pipeline.Workspace)\drop\tests\functionApp.tests.results.xml";
                        OutputFormat = "NUnitXML";
                        PassThru     = $true;
                        Strict       = $true;
                    }
                    $pester = Invoke-Pester @splat;

                    if ($pester.TotalCount -eq $pester.PassedCount)
                    {
                        Write-Host "##vso[task.complete result=Succeeded;]DONE";
                    }
                    else
                    {
                        Write-Host "##vso[task.complete result=Failed;]DONE";
                    }
                  errorActionPreference: stop
                  azurePowerShellVersion: latestVersion

              - task: PublishTestResults@2
                displayName: Publish Test Results
                condition: always()
                inputs:
                  testResultsFormat: NUnit
                  testResultsFiles: "*.results.xml"
                  searchFolder: $(Pipeline.Workspace)\drop\tests
  
              # - task: AzureAppServiceManage@0
              #   condition: succeeded()
              #   enabled: true
              #   displayName: Swap deployment slots
              #   inputs:
              #     azureSubscription: ${{ parameters.azureSubscription }}
              #     resourceGroupName: $(resourceGroupName)
              #     action: Swap Slots
              #     webAppName: ${{ parameters.functionAppName }}
              #     swapWithProduction: true

              - task: AzureResourceGroupDeployment@2
                enabled: true
                condition: and(succeeded(), eq('${{ parameters.cleanup }}', true))
                displayName: Delete RG
                inputs:
                  azureSubscription: ${{ parameters.azureSubscription }}
                  action: DeleteRG
                  resourceGroupName: ${{ parameters.resourceGroupName }}